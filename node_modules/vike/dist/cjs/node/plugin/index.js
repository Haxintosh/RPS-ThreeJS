"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.version = exports.ssr = exports.plugin = void 0;
exports.default = plugin;
var utils_js_1 = require("./utils.js");
Object.defineProperty(exports, "version", { enumerable: true, get: function () { return utils_js_1.PROJECT_VERSION; } });
const utils_js_2 = require("./utils.js");
const buildConfig_js_1 = require("./plugins/buildConfig.js");
const previewConfig_js_1 = require("./plugins/previewConfig.js");
const autoFullBuild_js_1 = require("./plugins/autoFullBuild.js");
const index_js_1 = require("./plugins/devConfig/index.js");
const packageJsonFile_js_1 = require("./plugins/packageJsonFile.js");
const removeRequireHookPlugin_js_1 = require("./plugins/removeRequireHookPlugin.js");
const index_js_2 = require("./plugins/importUserCode/index.js");
const index_js_3 = require("./plugins/config/index.js");
const distFileNames_js_1 = require("./plugins/distFileNames.js");
const extractAssetsPlugin_js_1 = require("./plugins/extractAssetsPlugin.js");
const extractExportNamesPlugin_js_1 = require("./plugins/extractExportNamesPlugin.js");
const suppressRollupWarning_js_1 = require("./plugins/suppressRollupWarning.js");
const setGlobalContext_js_1 = require("./plugins/setGlobalContext.js");
const index_js_4 = require("./plugins/importBuild/index.js");
const commonConfig_js_1 = require("./plugins/commonConfig.js");
const extensionsAssets_js_1 = require("./plugins/extensionsAssets.js");
const baseUrls_js_1 = require("./plugins/baseUrls.js");
const envVars_js_1 = require("./plugins/envVars.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const fileEnv_js_1 = require("./plugins/fileEnv.js");
assertNodeEnv();
(0, utils_js_2.markEnvAsVikePluginLoaded)();
// Return as `any` to avoid Plugin type mismatches when there are multiple Vite versions installed
function plugin(vikeConfig) {
    const plugins = [
        (0, index_js_3.resolveVikeConfig)(vikeConfig), // The configResolved() hook of resolveVikeConfig() should be the first called
        ...(0, commonConfig_js_1.commonConfig)(),
        (0, index_js_2.importUserCode)(),
        ...(0, index_js_1.devConfig)(),
        (0, buildConfig_js_1.buildConfig)(),
        (0, previewConfig_js_1.previewConfig)(),
        ...(0, autoFullBuild_js_1.autoFullBuild)(),
        (0, packageJsonFile_js_1.packageJsonFile)(),
        (0, removeRequireHookPlugin_js_1.removeRequireHookPlugin)(),
        (0, distFileNames_js_1.distFileNames)(),
        ...(0, extractAssetsPlugin_js_1.extractAssetsPlugin)(),
        (0, extractExportNamesPlugin_js_1.extractExportNamesPlugin)(),
        (0, suppressRollupWarning_js_1.suppressRollupWarning)(),
        (0, setGlobalContext_js_1.setGlobalContext)(),
        ...(0, index_js_4.importBuild)(),
        (0, extensionsAssets_js_1.extensionsAssets)(),
        (0, baseUrls_js_1.baseUrls)(vikeConfig),
        (0, envVars_js_1.envVarsPlugin)(),
        (0, fileEnv_js_1.fileEnv)()
    ];
    return plugins;
}
exports.plugin = plugin;
exports.ssr = plugin;
// Enable `const vike = require('vike/plugin')`.
//  - This lives at the end of the file to ensure it happens after all assignments to `exports`.
//  - This is only used for the CJS build; we wrap it in a try-catch for the ESM build.
try {
    module.exports = Object.assign(exports.default, exports);
}
catch { }
// Error upon wrong usage
Object.defineProperty(plugin, 'apply', {
    enumerable: true,
    get: () => {
        (0, utils_js_2.assertUsage)(false, `Add ${picocolors_1.default.cyan('vike()')} instead of ${picocolors_1.default.cyan('vike')} to vite.config.js#plugins (i.e. call the function and add the return value instead of adding the function itself)`, { showStackTrace: true });
    }
});
function assertNodeEnv() {
    const nodeEnv = (0, utils_js_2.getNodeEnv)();
    if (nodeEnv === 'test')
        return;
    // We should change this to be a warning if it blocks users (e.g. if a bad-citizen tool sets a wrong process.env.NODE_ENV value).
    (0, utils_js_2.assertUsage)(
    /* We can enable this assertion after Vike's CLI is implemented and using Vite's CLI is deprecated (we can then check whether the context is a `$ vike build`).
    isNodeEnvDev() || isVikeCliBuild(),
    /*/
    (0, utils_js_2.isNodeEnvDev)() || true, 
    ///*/
    [
        picocolors_1.default.cyan(`process.env.NODE_ENV === ${JSON.stringify(nodeEnv)}`),
        '(which Vike interprets as a non-development environment https://vike.dev/NODE_ENV)',
        'while the vike/plugin module is loaded.',
        utils_js_2.vikeVitePluginLoadedInProductionError
    ].join(' '));
}
